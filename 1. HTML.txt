1. HTML:   
<!DOCTYPE html>   
<html lang="en">   
<head>    
    <meta charset="UTF-8">   
    <meta name="viewport" content="width=device-width, initialscale=1.0">   
    <title>Deadlock Prevention and Recovery Toolkit</title>   
    <link rel="stylesheet" href="styles.css">   
</head>   
<body>   
    <h1>Deadlock Prevention and Recovery Toolkit</h1>   
       
    <div id="controls">   
        <h2>Input Resource Allocation</h2>   
        <textarea id="allocationInput" placeholder="Enter allocation matrix  
(comma-separated)"></textarea>   
        <textarea id="maxInput" placeholder="Enter max demand matrix"></textarea>   
        <textarea   	id="availableInput"   	placeholder="Enter   	available resources"></textarea>   
        <button onclick="runBankersAlgorithm()">Run Banker's  
Algorithm</button>   
        <button onclick="detectDeadlock()">Detect Deadlock</button>   
        <button onclick="simulateDeadlock()">Simulate Deadlock</button>      </div>   
       
    <canvas id="graphCanvas" width="500" height="300"></canvas>   
       
<div id="output"></div>   
       
    <script src="script.js"></script>   
</body>   
</html>   
   
2. CSS:   
body {     font-family: Arial, sans-serif;     text-align: center;      
margin: 20px;   
}   
   
h1 {     font-size:  
24px;   
}   
   
h2 {     font-size: 18px;      
margin-bottom: 10px;   
}   
   
#controls {     width: 60%;     margin: 0 auto;     padding: 20px;     border: 1px solid #ddd;     borderradius: 10px;     background-color:  
#f9f9f9;   
}   
   
textarea {     width: 100%;     height: 60px;     margin: 10px 0;     padding: 10px;     fontsize: 14px;     border: 1px solid #ccc;     borderradius: 
5px;   
}   
   
button {     padding: 10px 15px;     margin: 10px;     font-size: 14px;     font-weight: bold;     color: white;     backgroundcolor: 
#007bff;     border:  none;     border-radius: 5px;  cursor: 
pointer;   
}   
button:hover {     backgroundcolor: 
#0056b3;   
}   
   
canvas {     border: 1px solid black;     margin-top: 20px;     width: 100%;     max-width: 
500px;   
}   
   
#output {     margin-top: 20px;     font-size: 16px;     font-weight: bold;     color: 
#333;     padding:  
10px;     border: 1px solid #ddd;     background- 
color: #fff;     width: 60%;     margin: 
10px auto;     border-radius: 5px;   
}   
3. JAVASCRIPT:   
function runBankersAlgorithm() {     let 
allocation =   
parseInput(document.getElementById("allocationInput").value);     let max = parseInput(document.getElementById("maxInput").value);     let  
available =   
parseArray(document.getElementById("availableInput").value);   
   
if (!allocation || !max || !available) {         alert("Invalid input. 
Please enter proper matrices.");         return;   
    }    
   
    let safeSequence = bankersAlgorithm(allocation, max, available);     if  
(safeSequence.length > 0) {          document.getElementById("output").innerText = "Safe Sequence: " + 
safeSequence.join(" â†’ ");   
    } else {   
        document.getElementById("output").innerText = "No safe sequence found. Possible deadlock!";   
    }   
}   
   
function detectDeadlock() {      let allocation =   
parseInput(document.getElementById("allocationInput").value);   
let available =   
parseArray(document.getElementById("availableInput").value);   
   
    if (!allocation || !available) {         alert("Invalid input.  
Please enter proper matrices.");         return;   
    }   
   
let deadlockExists = deadlockDetection(allocation, available);      
document.getElementById("output").innerText = deadlockExists ? "Deadlock 
detected!" : "No deadlock detected.";   
}   
   
function simulateDeadlock() {      document.getElementById("allocationInput").value =   "0,1,0\n2,0,0\n3,0,2\n2,1,1\n0,0,2";      document.getElementById("maxInput").value =   
"7,5,3\n3,2,2\n9,0,2\n2,2,2\n4,3,3";     document.getElementById("availableInput").value = "3,3,2";     document.getElementById("output").innerText = "Deadlock scenario loaded. Run detection or Banker's Algorithm.";   
}   
   
function bankersAlgorithm(allocation, max, available) {     let numProcesses = allocation.length;     let numResources = allocation[0].length;  let work = 
available.slice();      let finish = Array(numProcesses).fill(false);     let  safeSequence = [];   
   
    let need = max.map((maxRow, i) => maxRow.map((maxVal, j) => maxVal - allocation[i][j]));   
   
for (let count = 0; count < numProcesses; count++) {         let found =  
false;         for (let i = 0; i < numProcesses; i++) {             if (!finish[i] && 
need[i].every((needVal, j) => needVal <= work[j])) {                 work = work.map((workVal, j) => workVal + allocation[i][j]);                 finish[i] = true;                 safeSequence.push(i);                 found = true;                  
break;   
            }   
        }   
        if (!found) return [];   
    }   
   
    return safeSequence;   
}   
   
function deadlockDetection(allocation, available) {  let numProcesses = allocation.length;      let numResources = allocation[0].length;     let work = 
available.slice();     let finish =  
Array(numProcesses).fill(false);   
   
    let canProceed = true;     while (canProceed) {         canProceed = false;         
for (let i = 0; i < numProcesses; i++) {             if (!finish[i] &&  allocation[i].every((allocVal, j) => allocVal <= work[j])) {                 work = 
work.map((workVal, j) => workVal + allocation[i][j]);                 finish[i] = true;                  
canProceed = true;   
            }   
        }   
    }   
   
    return finish.includes(false);   
}   
   
function parseInput(text) {     return text.split("\n").map(row => row.split(",").map(Number));   
}   
   
function parseArray(text) {      return text.split(",").map(Number);   
}   
